// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Session {
  id String  @id @default(uuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId],references: [id] , onDelete: Cascade)
}

model User {
  id String @id @default(uuid())
  name String?
  email String? @unique
  image String?
  password String?
  isAdmin Boolean @default(false)
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
}
 
model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Availability {
    Available
    Reserved
    Sold
}

model CAR {
  id String @id @default(uuid())
  carName String 
  Img String[]
  brand String
  price Int
  Fuel String
  Seat Int 
  Mileage Int
  Availability Availability
  model String
  Plate String
  Year Int
  type String
  Transmission String
  Color String 
  ownerShip Int
  KmsDone Int
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

